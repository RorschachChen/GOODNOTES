1160. Find Words That Can Be Formed by Characters
给一组string和一个string，求能用string拼成的长度和。
Solution:
用Counter统计
def countCharacters(self, words: List[str], chars: str) -> int:
        from collections import Counter
        charcount = Counter(chars)
        result = []
        for string in words:
            stringcount = Counter(string)
            flag = 0
            for key in stringcount.keys():
                if charcount[key]>=stringcount[key]:
                    continue
                else:
                    flag = 1
                    break
            if flag == 0:
                result.append(len(string))
        return sum(result)

557. Reverse Words in a String III
把每个string倒过来，保留space:
Solution:
def reverseWords(self, s: str) -> str:
        li = s.split(' ')
        res = [word[::-1] + " " for word in li]
        back = ""
        for i in res:
            back+=i
        return back.rstrip(" ")

509. Fibonacci Number
递归
Solution:
(1)
def fib(self, N: int) -> int:
        if N==0:
            return 0
        elif N==1:
            return 1
        while N>0:
            return self.fib(N-1)+self.fib(N-2)
(2)
def F(N, memo):
        if N in memo:
            return memo[N]
        else:
            fib_N = F(N-1, memo) + F(N-2, memo)
            memo[N] = fib_N
            return F(N, memo)
        
    return F(N, {0:0, 1:1, 2:1})

1122. Relative Sort Array
A中含B，按B中顺序排，剩下升序
def relativeSortArray(self, arr1: List[int], arr2: List[int]) -> List[int]:
        from collections import Counter
        res = Counter(arr1)
        back = []
        for i in arr2:
            for _ in range(res[i]):
                back.append(i)
        arr3 = []
        for i in arr1:
            if i not in arr2:
                arr3.append(i)
                
        arr3 = sorted(arr3)
        back.extend(arr3)
        return back

1002. Find Common Characters
Solution:
def commonChars(self, A: List[str]) -> List[str]:
        res = set(A[0])
        tmp = [[l] * min([a.count(l) for a in A]) for l in res]
        result = []
        for i in tmp:
            result+=i
        return result

883. Projection Area of 3D Shapes
俯视正视侧视记录每一行每一列最大值，俯视记录非零数量
Solution:
def projectionArea(self, grid: List[List[int]]) -> int:
        res1 = []
        for i in grid:
            res1.append(max(i))
        
        res2 = []
        for i in range(len(grid[0])):
            temp = []
            for j in grid:
                temp.append(j[i])
            res2.append(max(temp))

        res3 = 0
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j]!=0:
                    res3+=1
        return sum(res1)+res3+sum(res2)

1047. Remove All Adjacent Duplicates In String
消消乐
Solution: 用栈，如果栈非空然后上一个和下一个相同，pop。直接对S进行处理就行了，第一次做的时候还另外创建的了一个stack进行递归
def removeDuplicates(self, S: str) -> str:
        stack = []
        for s in S:
            if stack and s==stack[-1]:
                stack.pop()
                continue
            stack.append(s)
        return "".join(stack)

1200. Minimum Absolute Difference
RT. ascending
Solution:
def minimumAbsDifference(self, arr: List[int]) -> List[List[int]]:
        arr2 = sorted(arr)
        res = []
        for i in range(len(arr2)-1):
            res.append(abs(arr2[i]-arr2[i+1]))
        mini = min(res)
        back = []
        for i in range(len(arr2)-1):
            if abs(arr2[i]-arr2[i+1])==mini:
                back.append([arr2[i],arr2[i+1]])
        return back

876. Middle of the Linked List
Solution:
def middleNode(self, head: ListNode) -> ListNode:
        count = 1
        node = head
        while node.next!=None:
            node = node.next
            count += 1
        middle = count//2+1
        i = 0
        node = head
        while i<=middle-2:
            node = node.next
            i += 1
        return node

908. Smallest Range I
侮辱智商
def smallestRangeI(self, A: List[int], K: int) -> int:
        return max(max(A)-min(A)-2*K, 0)

1025. Divisor Game
Initially, there is a number N on the chalkboard.  On each player's turn, that player makes a move consisting of:
Choosing any x with 0 < x < N and N % x == 0.
Replacing the number N on the chalkboard with N - x.
Also, if a player cannot make a move, they lose the game.
Return True if and only if Alice wins the game, assuming both players play optimally.
Solution:
return True if N % 2 == 0 else False

821. Shortest Distance to a Character
Given a string S and a character C, return an array of integers representing the shortest distance from the 
character C in the string.
Solution:
每次记录start和end，然后对中间的进行比较计算distance
def shortestToChar(self, S: str, C: str) -> List[int]:
        back  = []
        end = S.index(C)
        start = float("Inf")
        for i in range(len(S)):
            if S[i] == C:
                back.append(0)
                start = end
                try:
                    end = S[i+1:].index(C)+i+1
                except:
                    end = float("Inf")
            else:
                back.append(min(abs(i-start), abs(end-i)))
        return back

