“拿到一个问题，你感觉如果不穷举一下就没法知道答案，那就可以开始回溯了。”

一般回溯的问题有三种：
Find a path to success 有没有解
Find all paths to success 求所有解
Find the best path to success 求最优解

https://segmentfault.com/a/1190000006121957

关于回溯的三种问题，模板略有不同，
第一种，返回值是true/false。
第二种，求个数，设全局counter（self.），返回值是void(self.func()只调用不返回)；求所有解信息，设result，返回值void。
第三种，设个全局变量best，返回值是void。

回溯其实是基于DFS的



1 出口。一个递归算法一定要有出口，否则就是一个死循环了。【把出口语句放在递归函数的第一行就行】
2 递归函数的参数。一般情况下，递归函数是要带参数的，因为递归操作都是用来处理下一次的过程，如果没有参数的话，那么就很难从下一次的操作回溯到当前操作了。
【不破坏当前参数的值，直接把当前值加上一个值】【结果一定是要有一个全局参数来保存】
3 递归函数的处理过程。
【如果当前递归过程的处理参数符合要求，则执行相关赋值或其它操作，然后转入下一次递归，如果下一次递归不能找到出口，
则把之前相关赋值或其它操作重置为初始状态。】
4. 已经拿过的数不再拿 if(s.contains(num)){continue;}
5. 遍历过当前节点后，为了回溯到上一步，要去掉已经加入到结果list中的当前节点。


以下是leetcode里的例题
39. Combination Sum
Solution:
from copy import deepcopy
class Solution:
    def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:
        self.ans = []
        # if len(candidates)<=1:
        # candidates
        self.path = []
        candidates.sort()
        self.helper(candidates, target, 0)
        return self.ans
    
    def helper(self, candidates, target, level):
        if target==0:
            self.ans.append(deepcopy(self.path))
            return
        for i in range(level, len(candidates)):
            if target-candidates[i]<0:
                break
            self.path.append(candidates[i])
            self.helper(candidates, target-candidates[i], i)
            self.path.pop()

40. Combination Sum II
class Solution:
    def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:
        self.ans = []
        self.path = []
        candidates.sort()
        visited = [False]*len(candidates)
        self.helper(candidates, target, 0, visited)
        return self.ans
    
    def helper(self, candidates, target, level, visited):
        if target==0:
            self.ans.append(deepcopy(self.path))
            return
        for i in range(level, len(candidates)):
            if i>level and candidates[i]==candidates[i-1]:
                continue
            关键就是同一层不能用两次，但是下一层可以继续用
            if visited[i]:
                continue
            if target-candidates[i]<0:
                break
            self.path.append(candidates[i])
            visited[i] = True
            self.helper(candidates, target-candidates[i], i+1, visited)
            self.path.pop()
            visited[i] = False

79. Word Search
Solution:
class Solution:
    def exist(self, board: List[List[str]], word: str) -> bool:
        rows, cols = len(board), len(board[0])
        # query = []
        self.ans = False
        for i in range(rows):
            for j in range(cols):
                if board[i][j]==word[0]:
                    if self.ans==True:
                        return True
                    visited = [[False]*cols for _ in range(rows)]
                    visited[i][j] = True
                    self.dfs(i, j, board, word[1:], visited)
        return self.ans
        
    def dfs(self, i, j, board, word, visited):
        if self.ans==True:
            return
        directions = [(1, 0), (0, 1), (0, -1), (-1, 0)]
        if not word:
            self.ans = True
            return
        for direction in directions:
            nx = i + direction[0]
            ny = j + direction[1]
            if 0<=nx<=len(board)-1 and 0<=ny<=len(board[0])-1 and not visited[nx][ny]:
                if board[nx][ny]==word[0]:
                    visited[nx][ny]=True
                    self.dfs(nx, ny, board, word[1:], visited)
                    visited[nx][ny]=False

46. Permutations
Solution:
def permute(self, nums: List[int]) -> List[List[int]]:
        self.ans = []
        if len(nums)<1:
            return []
        visited = [False]*len(nums)
        # visited[0] = True
        self.helper(nums, [], visited)
        return self.ans
    
    def helper(self, nums, path, visited):
        if len(path)==len(nums):
            self.ans.append(deepcopy(path))
            return
        for i in range(len(nums)):
            if not visited[i]:
                visited[i] = True
                self.helper(nums, path+[nums[i]], visited)
                visited[i] = False

47. Permutations II
Solution:
from copy import deepcopy
class Solution:
    def permuteUnique(self, nums: List[int]) -> List[List[int]]:
        self.ans = []
        nums.sort()
        # print(nums)
        visited = [False]*len(nums)
        self.helper(nums, [], visited)
        return self.ans
    
    def helper(self, nums, path, visited):
        if len(path)==len(nums):
            self.ans.append(deepcopy(path))
            return
        for i in range(len(nums)):
            if visited[i]:
                continue
            elif i>0 and nums[i-1]==nums[i] and visited[i-1]:
                continue
            else:
                visited[i]=True
                self.helper(nums, path+[nums[i]], visited)
                visited[i]=False 

90. Subsets II
Solution:
from copy import deepcopy
class Solution:
    def subsetsWithDup(self, nums: List[int]) -> List[List[int]]:
        self.ans = []
        nums.sort()
        visited = [False]*len(nums)
        self.helper(nums, [], visited, 0)
        return self.ans
    
    def helper(self, nums, path, visited, level):
        if level==len(nums):
            self.ans.append(deepcopy(path))
            return
        # for i in range(len(nums)):
        #     if visited[i]:
        #         continue
        #     if i>0 and nums[i-1]==nums[i] and visited[i-1]:
        #         continue
        #     visited[i]=True
        #     self.helper(nums, path+[nums[i]], visited, level+1)
        #     visited[i]=False
        #     self.helper(nums, path, visited, level+1)
        self.helper(nums, path+[nums[level]], visited, level+1)
        while level+1<len(nums) and nums[level+1]==nums[level]:
            level += 1
        self.helper(nums, path, visited, level+1)

78. Subsets
Solution:
from copy import deepcopy
class Solution:
    def subsets(self, nums: List[int]) -> List[List[int]]:
        self.ans = []
        if len(nums)==1:
            return []
        nums.sort()
        visited = [False]*(len(nums))
        self.helper(nums, [], visited, 0)
        return self.ans
        
    def helper(self, nums, path, visited, index):
        if index==len(nums):
            self.ans.append(deepcopy(path))
            return
        visited[index]=True
        self.helper(nums, path+[nums[index]], visited, index+1)
        visited[index]=False
        self.helper(nums, path, visited, index+1)

22. Generate Parentheses
Solution:
from copy import deepcopy
class Solution:
    def generateParenthesis(self, n: int):
        """
        :param n: 
        :return: 
        """
        self.ans = []
        self.helper(n, n, "")
        return self.ans
    
    def helper(self, ll, rl, path):
        if ll==0 and rl==0:
            self.ans.append(deepcopy(path))
            return
        if ll==0:
            self.helper(ll, rl-1, path+")")
        elif rl==0:
            self.helper(ll-1, rl, path+"(")
        elif ll==rl:
            self.helper(ll-1, rl, path+"(")
        else:
            self.helper(ll-1, rl, path+"(")
            self.helper(ll, rl-1, path+")")
