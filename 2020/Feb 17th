1343. Number of Sub-arrays of Size K and Average Greater than or Equal to Threshold
Solution:
def numOfSubarrays(self, arr: List[int], k: int, threshold: int) -> int:
        ans = 0
        sum = 0
        for i in range(len(arr)):
            sum += arr[i]
            if i+1>=k:
                if sum>=threshold*k:
                    ans += 1
                sum -= arr[i+1-k]
                
        return ans

889. Construct Binary Tree from Preorder and Postorder Traversal
Solution:
def constructFromPrePost(self, pre: List[int], post: List[int]) -> TreeNode:
        if not post or not pre:
            return None
        root = TreeNode(post[-1])
        if len(post)==1:
            return root
        ind = post.index(pre[1])
        root.left = self.constructFromPrePost(pre[1:ind+2], post[:ind+1])
        root.right = self.constructFromPrePost(pre[ind+2:], post[ind+1:-1])
        return root442. Find All Duplicates in an Array
        
442. Find All Duplicates in an Array
Solution:
def findDuplicates(self, nums: List[int]) -> List[int]:
        from collections import Counter
        res = Counter(nums)
        ans = []
        for key in res.keys():
            if res[key] == 2:
                ans.append(key)
        return ans

def findDuplicates(self, nums: List[int]) -> List[int]:
        for i in range(len(nums)):
            if nums[abs(nums[i]) - 1] < 0:
                yield abs(nums[i])
            else:
                nums[abs(nums[i]) - 1] *= -1

1043. Partition Array for Maximum Sum
考虑不断添加数组中元素，求最后最大的和是多少
[1] -> [1] -> 1
[1, 15] -> [15, 15] ->30
[1, 15, 7] -> [15, 15, 15] -> 45
个数超过k个后，考虑包含新来元素的长度是多少，最后一组的长度分别从1到k，看dp[i-j+1]加上把后面j个放一组，全变成最大值的和和当前dp[i]的取最大值。
Solution:
def maxSumAfterPartitioning(self, A: List[int], K: int) -> int:
        dp = [0]*len(A)
        for i in range(K):
            dp[i] = (i+1)*max(A[:i+1])
        for i in range(K,len(A)):
            for j in range(K):
                dp[i] = max(dp[i], dp[i-j-1]+(j+1)*max(A[i-j:i+1]))
        return dp[len(A)-1]

