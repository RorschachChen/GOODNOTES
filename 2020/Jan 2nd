开始选课，nano？interesting

1033. Moving Stones Until Consecutive
Solution:
def numMovesStones(self, a: int, b: int, c: int) -> List[int]:
        mi = min(a, b, c)
        ma = max(a, b, c)
        for i in [a, b, c]:
            if i!=mi and i!=ma:
                middle = i
        right =  ma-mi-2

            
        d=min(middle-mi,ma-middle)-1
        m = (d>1)+(right!=0)
        return m,right

141. Linked List Cycle
Solution:
把所有都指向一个新的，然后如果非空就True
def hasCycle(self, head: ListNode) -> bool:
        new = ListNode(-99999)
        node = head
        while node:
            if node.next == new:
                return True
            else:
                temp = node.next
                node.next = new
                node = temp
        return False

205. Isomorphic Strings
Solution:
def isIsomorphic(self, s: str, t: str) -> bool:
        if len(s)!=len(t):
            return False
        if not s and not t:
            return True
        dd = {}
        for i in range(len(s)):
            # if s[i]!=t[i]:
            if s[i] not in dd.keys():
                dd[s[i]]=t[i]
            elif t[i]!=dd[s[i]]:
                return False
        res = []
        for key in dd.keys():
            res.append(dd[key])
        temp = set(res)
        if len(temp) != len(res):
            return False
        return True
        
20. Valid Parentheses
Solution:
是{([就放到队列里，不是就拿出来对比是不是对应pair
from collections import deque
class Solution:
    def isValid(self, s: str) -> bool:
        q = deque([])
        pair = {'(':')', '[':']', '{':'}'}
        for e in s:
            if e in pair:
                q.append(e)
            else:
                if len(q)==0:
                    return False
                else:
                    pp = q.pop()
                    if pair[pp]!=e:
                        return False
        return len(q)==0

172. Factorial Trailing Zeroes
Given an integer n, return the number of trailing zeroes in n!.
Solution:
def trailingZeroes(self, n: int) -> int:
        return 0 if n == 0 else int(n / 5 + self.trailingZeroes(n / 5))
(2)
def trailingZeroes(self, n: int) -> int:
        po = 1
        fives = 0
        while n // (5 ** po) > 0:
            fives = fives + n // (5 ** po)
            po = po + 1
        return fives

88. Merge Sorted Array
Solution:


234. Palindrome Linked List
Solution:
def isPalindrome(self, head: ListNode) -> bool:
        a=[]
        while head!=None:
            a.append(head.val)
            head=head.next
        if a==a[::-1]:
            return True
        else:
            return False

1037. Valid Boomerang
Solution:
def isBoomerang(self, points: List[List[int]]) -> bool:
        x1, y1 = points[0]
        x2, y2 = points[1]
        x3, y3 = points[2]
        u = (x2 - x1, y2 - y1)
        v = (x3 - x1, y3 - y1)
        return (x2 - x1) * (y3 - y1) - (x3 - x1) * (y2 - y1) != 0

434. Number of Segments in a String
Count the number of segments in a string, where a segment is defined to be a contiguous sequence of non-space characters.
Please note that the string does not contain any non-printable characters.
Solution:
def countSegments(self, s: str) -> int:
        if not s:
            return 0
        import re
        s = re.sub(r'[^\w\s]','',s)
        res = s.split(" ")
        return len(res)


        

