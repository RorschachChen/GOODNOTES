开始选课，nano？interesting

1033. Moving Stones Until Consecutive
Solution:
def numMovesStones(self, a: int, b: int, c: int) -> List[int]:
        mi = min(a, b, c)
        ma = max(a, b, c)
        for i in [a, b, c]:
            if i!=mi and i!=ma:
                middle = i
        right =  ma-mi-2

            
        d=min(middle-mi,ma-middle)-1
        m = (d>1)+(right!=0)
        return m,right

141. Linked List Cycle
Solution:
把所有都指向一个新的，然后如果非空就True
def hasCycle(self, head: ListNode) -> bool:
        new = ListNode(-99999)
        node = head
        while node:
            if node.next == new:
                return True
            else:
                temp = node.next
                node.next = new
                node = temp
        return False

205. Isomorphic Strings
Solution:
def isIsomorphic(self, s: str, t: str) -> bool:
        if len(s)!=len(t):
            return False
        if not s and not t:
            return True
        dd = {}
        for i in range(len(s)):
            # if s[i]!=t[i]:
            if s[i] not in dd.keys():
                dd[s[i]]=t[i]
            elif t[i]!=dd[s[i]]:
                return False
        res = []
        for key in dd.keys():
            res.append(dd[key])
        temp = set(res)
        if len(temp) != len(res):
            return False
        return True
        
20. Valid Parentheses
Solution:
是{([就放到队列里，不是就拿出来对比是不是对应pair
from collections import deque
class Solution:
    def isValid(self, s: str) -> bool:
        q = deque([])
        pair = {'(':')', '[':']', '{':'}'}
        for e in s:
            if e in pair:
                q.append(e)
            else:
                if len(q)==0:
                    return False
                else:
                    pp = q.pop()
                    if pair[pp]!=e:
                        return False
        return len(q)==0

172. Factorial Trailing Zeroes
Given an integer n, return the number of trailing zeroes in n!.
Solution:
def trailingZeroes(self, n: int) -> int:
        return 0 if n == 0 else int(n / 5 + self.trailingZeroes(n / 5))
(2)
def trailingZeroes(self, n: int) -> int:
        po = 1
        fives = 0
        while n // (5 ** po) > 0:
            fives = fives + n // (5 ** po)
            po = po + 1
        return fives

88. Merge Sorted Array
Solution:
def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:
        """
        Do not return anything, modify nums1 in-place instead.
        """
        while len(nums1) > m:
            nums1.pop()
        while len(nums2) > n:
            nums2.pop()
        if nums1 and nums2:
            if nums2[0] >= nums1[-1]:
                while nums2:
                    nums1.append(nums2.pop(0))
            else:
                nums2_add = nums2[:]
                nums3 = []
                for i in range(len(nums2)):
                    if nums2[i] >= nums1[-1]:
                        nums3 = nums2[i:]
                        nums2_add = nums2[0:i]
                        break
                        
                nums1_index = 0
                for number2 in nums2_add:
                    for index in range(nums1_index, len(nums1)):
                        if number2 <= nums1[index]:
                            nums1.insert(index, number2)
                            nums1_index = index+1
                            break
                            
                for number3 in nums3:
                    nums1.append(number3)
        else:
            if not nums1:
                for number in nums2:
                    nums1.append(number)

234. Palindrome Linked List
Solution:
def isPalindrome(self, head: ListNode) -> bool:
        a=[]
        while head!=None:
            a.append(head.val)
            head=head.next
        if a==a[::-1]:
            return True
        else:
            return False

1037. Valid Boomerang
Solution:
def isBoomerang(self, points: List[List[int]]) -> bool:
        x1, y1 = points[0]
        x2, y2 = points[1]
        x3, y3 = points[2]
        u = (x2 - x1, y2 - y1)
        v = (x3 - x1, y3 - y1)
        return (x2 - x1) * (y3 - y1) - (x3 - x1) * (y2 - y1) != 0

434. Number of Segments in a String
Count the number of segments in a string, where a segment is defined to be a contiguous sequence of non-space characters.
Please note that the string does not contain any non-printable characters.
Solution:
def countSegments(self, s: str) -> int:
        if not s:
            return 0
        import re
        s = re.sub(r'[^\w\s]','',s)
        res = s.split(" ")
        return len(res)

434. Number of Segments in a String
Count the number of segments in a string, where a segment is defined to be a contiguous sequence of non-space characters.
Solution:
def countSegments(self, s: str) -> int:
        if len(s)==0:
            return 0
        count = 0
        if s[0]!=" ":
            flag = 1
            count = 1
        for i in range(1, len(s)):
            if s[i]==" ":
                flag = 0
            if s[i]!=" " and not flag:
                flag = 1
                count += 1
        return count

160. Intersection of Two Linked Lists
Solution:
这道题不是因为值相同而交集的，而是问你交集。直接把A所有节点放到集合中，一个个判断B的节点
def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> ListNode:
        S = set()
        while headA != None:headA, _ = headA.next, S.add(headA) 
        while headB != None:
            if headB in S: return headB
            headB = headB.next
            

203. Remove Linked List Elements
Solution:
(1) 8%
def removeElements(self, head: ListNode, val: int) -> ListNode:
        if not head:
            return  
        node = head
        while (node != None and node.val == val):
            node = node.next
        node2 = node
        if node==None:
            return 
        while node!= None:
            if node.next==None:
                if node.val==val:
                    return 
                else:
                    return node2
            if node.next.val == val:
                if node.next.next!=None:
                    node.next = node.next.next
                    continue
                else:
                    node.next = None
            node = node.next
        return node2
(2)可以先创造一个-1的节点，指向第一个节点，然后遍历。可以不用考虑很多情况，高效很多

840. Magic Squares In Grid（毫无意义的一道题）
Solution:
def numMagicSquaresInside(self, grid: List[List[int]]) -> int:
        if len(grid) < 3 or len(grid[0]) < 3:
            return 0
        counter = 0
        for row in range(len(grid) - 2):
            for col in range(len(grid[0]) - 2):
                sub_matrix = [[grid[row + i][col + j] for j in range(3)] for i in range(3)]
                if self.magic_square(sub_matrix):
                    counter += 1
        return counter

    def magic_square(self, matrix):
        is_number_right = all(1 <= matrix[i][j] <= 9 for i in range(3) for j in range(3))
        is_row_right = all(sum(row) == 15 for row in matrix)
        is_col_right = all(sum(col) == 15 for col in [[matrix[i][j] for i in range(3)] for j in range(3)])
        is_diagonal_right = matrix[1][1] == 5 and matrix[0][0] + matrix[-1][-1] == 10 and matrix[0][-1] + matrix[-1][0] == 10
        return is_number_right and is_row_right and is_col_right and is_diagonal_right

219. Contains Duplicate II
Given an array of integers and an integer k, find out whether there are two distinct indices i and j in the array such that 
nums[i] = nums[j] and the absolute difference between i and j is at most k.
Soltuion:


