865. Smallest Subtree with all the Deepest Nodes
判断某节点的左右子树高度是否相等，如果不相等，recur那个更深的.
具体点：dfs返回第一个是深度，第二个是节点
Solution:
https://blog.csdn.net/fuxuemingzhu/article/details/82432130
def subtreeWithAllDeepest(self, root: TreeNode) -> TreeNode:
        return self.dfs(root)[1]
    
def dfs(self, root):
        if not root:
            return 0, None
        left = self.dfs(root.left)
        right = self.dfs(root.right)
        if left[0]>right[0]:
            return left[0]+1, left[1]
        elif left[0]<right[0]:
            return right[0]+1, right[1]
        else:
            return left[0]+1, root

647. Palindromic Substrings
Solution:
def countSubstrings(self, s: str) -> int:
        self.ans = 0
        for i in range(len(s)):
            self.helper(s, i, i)
            self.helper(s, i, i+1)
        return self.ans
            
def helper(self, string, left, right):
        while(left>=0 and right<=len(string)-1 and string[left]==string[right]):
            left-=1
            right+=1
            self.ans+=

78. Subsets
Solution:
(1)
def subsets(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        res = [[]]
        for num in nums :
            for temp in res[:] :
                x = temp[:]
                x.append(num)
                res.append(x)
        return res
(2)      
分析：用三位表示从0到7的数，每个位从0到1都有，如果有1就取这个数到队列中。专程一个
def subsets(self, nums: List[int]) -> List[List[int]]:
        res = []
        maxbit = 2**len(nums)
        for i in range(maxbit):
            tmp = self.convert(nums, i)
            res.append(tmp)
        return res
def convert(self, nums, k):
        tmp = []
        i = k
        idx =  0
        while i>0:
            if ((i & 1) == 1):
                tmp.append(nums[idx]);
            idx+=1
            i = i>>1
        return tmp

540. Single Element in a Sorted Array
Solution:
(1)72 5
def singleNonDuplicate(self, nums: List[int]) -> int:
        if len(nums)==1:
            return nums[0]
        left = 0
        while len(nums)-1>left>=0:
            if nums[left]==nums[left+1]:
                left += 2
            else:
                return nums[left]  
        return nums[-1]
(2)44 7
def singleNonDuplicate(self, nums: List[int]) -> int:
        result = 0
        for i in nums:
            result^=i
        return result   

