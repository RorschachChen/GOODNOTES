1268. Search Suggestions System
Solution:
python里sort居然能对字符串作用
def suggestedProducts(self, products: List[str], searchWord: str) -> List[List[str]]:
        ans = []
        temp = products
        for i in range(len(searchWord)):
            prefix = searchWord[:i+1]
            tmp = []
            for j in range(len(temp)):
                if temp[j][:i+1] == prefix:
                    tmp.append(temp[j])
            tmp = sorted(tmp)
            if len(tmp)>3:
                tmp = tmp[:3]
            ans.append(tmp)
            # temp = tmp
        return ans

22. Generate Parentheses
Solution:

347. Top K Frequent Elements
Solution:
(1)56.45%  6.25%
def topKFrequent(self, nums: List[int], k: int) -> List[int]:
        if len(nums)==1:
            return nums
        left = 0
        right = len(nums)-1
        dict = {}
        while left<=right:
            tmp1 = nums[left]
            tmp2 = nums[right]
            dict[tmp1] = dict.setdefault(tmp1, 0) + 1
            left += 1
            dict[tmp2] = dict.setdefault(tmp2, 0) + 1
            right -= 1
        new = sorted(dict.items(), key=lambda d: d[1])[::-1]
        ans = []
        for i in range(k):
            ans.append(new[i][0])
(2)
def topKFrequent(self, nums: List[int], k: int) -> List[int]:
        freq = {}
        freq_list=[]  
        for num in nums:
            freq[num] = freq.setdefault(num, 0) + 1
                
        for key in freq.keys():
            freq_list.append((-freq[key], key))
        heapq.heapify(freq_list)
        topk = []
        for i in range(0,k):
            topk.append(heapq.heappop(freq_list)[1])
        return topk
        print(new)
        # ans = [new.keys()][:k]
        return ans

1143. Longest Common Subsequence
Solution:
def longestCommonSubsequence(self, text1: str, text2: str) -> int:
        return self.lcs(text1, text2)
        
    def lcs(self, X , Y): 
        # find the length of the strings 
        m = len(X) 
        n = len(Y) 

        # declaring the array for storing the dp values 
        L = [[None]*(n+1) for i in range(m+1)] 

        """Following steps build L[m+1][n+1] in bottom up fashion 
        Note: L[i][j] contains length of LCS of X[0..i-1] 
        and Y[0..j-1]"""
        for i in range(m+1): 
            for j in range(n+1): 
                if i == 0 or j == 0 : 
                    L[i][j] = 0
                elif X[i-1] == Y[j-1]: 
                    L[i][j] = L[i-1][j-1]+1
                else: 
                    L[i][j] = max(L[i-1][j] , L[i][j-1]) 

        # L[m][n] contains the length of LCS of X[0..n-1] & Y[0..m-1] 
        return L[m][n] 

1017. Convert to Base -2
Solution:
解析：待定
def baseNeg2(self, N: int) -> str:
        if N==0:
            return "0"
        ans = ""
        while N!=0:
            num = N & 1
            ans = str(num) + ans
            N = -(N>>1)
        return ans
    
609. Find Duplicate File in System
Solution:
def findDuplicate(self, paths: List[str]) -> List[List[str]]:
        dd = {}
        for i in range(len(paths)):
            st = paths[i].split(' ')
            path = st[0]
            for j in range(1, len(st)):
                tmp = st[j].rstrip(')').split('(')[1]
                # print(tmp)
                if tmp in dd.keys():
                    dd[tmp].append(path+'/'+st[j].rstrip(')').split('(')[0])
                else:
                    dd[tmp] = [path+'/'+st[j].rstrip(')').split('(')[0]]
        ans = []
        for i in dd.keys():
            if len(dd[i])>=2:
                ans.append(dd[i])
        return ans

1090. Largest Values From Labels
Solution:
def largestValsFromLabels(self, values: List[int], labels: List[int], num_wanted: int, use_limit: int) -> int:
        res  = []
        for i in range(len(values)):
            res.append([values[i], labels[i]])
        res.sort(key=lambda x: x[0], reverse=True)
        freq = {}
        i = 0
        ans = 0
        numSelected = 0
        uniq = list(set(labels))
        for i in range(len(uniq)):
            freq[uniq[i]] = 0
        # print(res)
        i = 0
        while numSelected<num_wanted and i<len(res):
            if freq[res[i][1]]>=use_limit:
                i+=1
                continue
            ans += res[i][0]
            freq[res[i][1]] = freq.setdefault(res[i][1], 0) + 1
            i+=1
            numSelected += 1
            # print(freq)    
        return ans

983. Minimum Cost For Tickets
Solution:
C++
class Solution {
public:
    int mincostTickets(vector<int>& days, vector<int>& costs) {
        vector<int> dp(366, INT_MAX);
        for (int day: days) {
            dp[day] = 0;
        }
        dp[0] = 0;
        for (int i=1;i<366;i++) {
            if (dp[i] == INT_MAX) {
                dp[i] = dp[i-1];
            }
            else {
                int cur = dp[i - 1] + costs[0];
                cur = min(cur, costs[1] + dp[max(0, i - 7)]);
                cur = min(cur, costs[2] + dp[max(0, i - 30)]);
                dp[i] = cur;
            }
            
        }
        
        return dp[days[days.size()-1]];
    }
};
(python)
def mincostTickets(self, days: List[int], costs: List[int]) -> int:
        dp = [-1]*366
        for day in days:
            dp[day] = 0
        dp[0] = 0
        for i in range(1, 366):
            if dp[i] == -1:
                dp[i] = dp[i-1]
            else:
                dp[i] = min(dp[i-1]+costs[0], dp[max(i-7, 0)]+costs[1], dp[max(i-30, 0)]+costs[2])
        return dp[days[-1]]

1267. Count Servers that Communicate
Solution:
def countServers(self, grid: List[List[int]]) -> int:
        rows, cols = len(grid), len(grid[0])
        row = [0] * rows
        col = [0] * cols
        
        for i in range(rows):
            for j in range(cols):
                if grid[i][j]==1:
                    row[i] += 1
                    col[j] += 1
        count = 0
        for i in range(rows):
            for j in range(cols):
                if grid[i][j]==1 and (row[i]>1 or col[j]>1):
                    count += 1
        return count
查并集(未通过，不知道怎么把有共同链接点的parent设置为一样)
def countServers(self, grid: List[List[int]]) -> int:
        rows, cols = len(grid), len(grid[0])
        # total = sum([sum(x) for x in grid])
        parent = [0]*rows*cols
        for i in range(rows):
            for j in range(cols):
                pixel = i*cols + j
                if grid[i][j] == 1:
                    # pixel = i*cols + j
                    parent[pixel] = pixel
                else:
                    parent[pixel] = -1        
        def find(i):
            x = i
            while parent[i] != i:
                i = parent[i]
                
            while( x != i ):                                
                j = parent[x]; 				
                parent[x]= i ; 				
                x=j;
            return i
        
        def union(i, j):
            pi = find(i)
            pj = find(j)
            if pi<=pj:
                parent[i] = pj
            else:
                parent[j] = pi
            
        for i in range(rows):
            flag = 0
            for j in range(cols):
                if flag == 0 and grid[i][j] == 1:
                    flag = 1
                    anchor = i*cols+j
                    continue
                if grid[i][j] == 1:
                    tobe = i*cols+j
                    union(anchor, tobe)    

        for j in range(cols):
            flag = 0
            for i in range(rows):
                if flag==0 and grid[i][j]==1:
                    flag = 1
                    anchor = i*cols+j
                    continue
                if grid[i][j]==1:
                    tobe = i*cols+j
                    union(anchor, tobe)
        res = collections.Counter(parent)
        sum = 0
        for i in res.keys():
            if i!=-1 and res[i]>=2:
                sum+=res[i]
        return sum

