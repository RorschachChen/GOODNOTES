Happy New Year!!!!!
572. Subtree of Another Tree
Solution:
感觉二叉树的题很多都是把逻辑整出来就行，就递归的部分应该是按照什么规则递归的。这里就是对s,t调用函数判断，有3种情况返回True，st相同，t和s的子树相同。
在函数中，如果ss和tt都不存在了，直接返回True，如果只有一个肯定是False，ss和tt点val不相同肯定返回False。（这里有个很奇怪的bug，就是如果不把第一函数的
倒数第一个判断写到or一起的话，就要在判断val相等的时候加try，不然就提示t没有val，except直接返回False，可能or里面某个判断引发了错误会直接跳过去判断下一
个）
def isSubtree(self, s: TreeNode, t: TreeNode) -> bool:
        if not s:
            return
        if self.isSame(s, t):
            return True
        return self.isSubtree(s.left, t) or self.isSubtree(s.right, t)
    
def isSame(self, ss, tt):
    if not ss and not tt:
        return True
    if not ss and not tt:
        return False
    if ss and not tt:
        return False
    try: 
        if ss.val!=tt.val:
            return False
    except:
        return False
    return self.isSame(ss.left, tt.left) and self.isSame(ss.right, tt.right)
    
819. Most Common Word
Solution:
用re找字母然后小写
def mostCommonWord(self, paragraph: str, banned: List[str]) -> str:
        words = [token for token in re.findall(r"([a-zA-Z]+)", paragraph.lower())]
        count = {}
        for word in words: 
            if word not in banned: 
                count[word] = count.get(word, 0) + 1
            else: 
                continue

        freq = max(count.values())
        return ''.join([k for k, v in count.items() if v == freq])

558. Quad Tree Intersection
Solution:
(fuxue)
def intersect(self, quadTree1: 'Node', quadTree2: 'Node') -> 'Node':
        if q1.isLeaf:
            return q1 if q1.val else q2
        if q2.isLeaf:
            return q2 if q2.val else q1
        
        q1.topLeft = self.intersect(q1.topLeft, q2.topLeft)
        q1.topRight = self.intersect(q1.topRight, q2.topRight)
        q1.bottomLeft = self.intersect(q1.bottomLeft, q2.bottomLeft)
        q1.bottomRight = self.intersect(q1.bottomRight, q2.bottomRight)
        
        if q1.topLeft.isLeaf and q1.topRight.isLeaf and q1.bottomLeft.isLeaf and q1.bottomRight.isLeaf:
            if q1.topLeft.val == q1.topRight.val == q1.bottomLeft.val == q1.bottomRight.val:
                q1.isLeaf = True
                q1.val = q1.topLeft.val
        return q1

671. Second Minimum Node In a Binary Tree
Solution:
def findSecondMinimumValue(self, root: TreeNode) -> int:
        if not root: 
            return -1
        self.res = float("inf")
        self.min = root.val
        self.search(root)
        return self.res if self.res != float("inf") else -1
    
    def search(self, root):
        if not root:
            return
        self.search(root.left)
        if self.min<root.val<self.res:
            self.res = root.val
        self.search(root.right)
        
405. Convert a Number to Hexadecimal
Solution:
def toHex(self, num: int) -> str:
        dic = {10:'a', 11:'b', 12:'c', 13:'d', 14:'e', 15:'f'}
        if num == 0:
            return "0"
        if num<0:
            num+=2**32
        if num>0:
            bit = int(math.log(num, 16))+1
            ans = ""
            res = num
            for i in range(bit):
                if i == bit-1:
                    if res in dic.keys():
                        ans += dic[res]
                    else:
                        ans+=str(res)
                    break
                high = int(res//16**(bit-1-i))
                if high in dic.keys():
                    ans += dic[high]
                else:
                    ans+=str(high)
                res = int(num%(16**(bit-1-i)))
        return ans

26. Remove Duplicates from Sorted Array
Given a sorted array nums, remove the duplicates in-place such that each element appear only once and return the new length.
Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.
Solution:
def removeDuplicates(self, nums: List[int]) -> int:
        if len(nums)==0:
            return 0
        if len(nums)==1:
            return 1
        flag = nums[0]
        i = 1
        while 1:
            try:
                if nums[i] == flag:
                    del nums[i]
                else:
                    flag = nums[i]
                    i += 1
                
            except:
                break
        return len(nums)+1

345. Reverse Vowels of a String
Write a function that takes a string as input and reverse only the vowels of a string.
Solution:
def reverseVowels(self, s: str) -> str:
        if s == "":
            return ""
        if s == " ":
            return " "
        res = []
        dic = ["a", "e", "i", "o", "u", 'A','E','I','O','U']
        for string in s:
            if string in dic:
                res.append(string)
        revres = res[::-1]
        for i in dic:
            s = s.replace(i, "+")
        flag = 0
        for i in range(len(s)):
            if s[i] == "+":
                if i == len(s)-1:
                    s = s[:i]+revres[flag]
                    break
                else:
                    s = s[:i]+revres[flag]+s[i+1:]
                    flag += 1
        return s

231. Power of Two
Given an integer, write a function to determine if it is a power of two.
Solution:
ASSHOLE.
def isPowerOfTwo(self, n: int) -> bool:
        if n <= 0:
            return False
        return math.log(n,2)-int(math.log(n,2))<=0.000000001

38. Count and Say
Solution:
统计重复的字母count+字母本身
def countAndSay(self, n: int) -> str:
        res = "1"
        for i in range(n - 1):
            prev = res[0]
            count = 1
            ans = ""
            for j in range(1, len(res)):
                cur = res[j]
                if cur != prev:
                    ans+=str(count)+str(prev)
                    prev = cur
                    count = 0
                count+=1
            res = ans+str(count)+str(prev)
        return res

724. Find Pivot Index
左边和和后边和相等
Solution:
nmd一开始写超时了。从两头往中间走，只需要走一趟就可以完成，而一直sum的话会用很长时间
def pivotIndex(self, nums: List[int]) -> int:
        if len(nums) == 0:
            return -1
        
        left = 0
        right = sum(nums)
        for idx, num in enumerate(nums):
            right -= num
            if left == right:
                return idx
            left += num
        return -1

482. License Key Formatting
The string is separated into N+1 groups by N dashes.
Given a number K, we would want to reformat the strings such that each group contains exactly K characters, except for the 
first group which could be shorter than K, but still must contain at least one character. Furthermore, there must be a dash 
inserted between two groups and all lowercase letters should be converted to uppercase.
Solution:
def licenseKeyFormatting(self, S: str, K: int) -> str:
        temp = ""
        ans = []
        for i in range(len(S)-1, -1, -1):
            if i == 0:
                if S[0]!='-':
                    if S[0].islower():
                        aka = S[0].upper()
                    else:
                        aka = S[0]
                    temp+=aka
                    ans.append(temp)
                    break
                elif len(temp)!=0:
                    ans.append(temp)
                    break
                else:
                    break
                
            if S[i]!="-":
                if S[i].islower():
                    aka = S[i].upper()
                else:
                    aka = S[i]
                temp+=aka
                if len(temp)==K:
                    ans.append(temp)
                    temp = ""
        return "-".join(ans)[::-1]

110. Balanced Binary Tree
Given a binary tree, determine if it is height-balanced.
For this problem, a height-balanced binary tree is defined as:
a binary tree in which the left and right subtrees of every node differ in height by no more than 1.
Solution:
def isBalanced(self, root: TreeNode) -> bool:
        return self.maxDepth(root) != -1
        
    def maxDepth(self, root):
        if not root:
            return 0
        
        left = self.maxDepth(root.left)
        right = self.maxDepth(root.right)
        if left == -1 or right == -1 or abs(left - right) > 1:
            return -1
        else:
            return max(left, right) + 1

225. Implement Stack using Queues
Solution:
class MyStack:

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.q = []
        self.size = 0

    def push(self, x: int) -> None:
        """
        Push element x onto stack.
        """
        self.q.append(x)
        self.size += 1

    def pop(self) -> int:
        """
        Removes the element on top of the stack and returns that element.
        """
        self.size -= 1
        self.q = self.q[::-1]
        ans = self.q[0]
        self.q = self.q[1:]
        self.q = self.q[::-1]
        return ans
        

    def top(self) -> int:
        """
        Get the top element.
        """
        return self.q[-1]

    def empty(self) -> bool:
        """
        Returns whether the stack is empty.
        """
        return len(self.q)==0


# Your MyStack object will be instantiated and called as such:
# obj = MyStack()
# obj.push(x)
# param_2 = obj.pop()
# param_3 = obj.top()
# param_4 = obj.empty()

849. Maximize Distance to Closest Person (类似821)
Solution:
从左往右，记录下每个0和它左边第一个1的距离，再从右往左，记录右边第一个的距离
def maxDistToClosest(self, seats: List[int]) -> int:
        index = -9999
        ans = [0]*len(seats)
        for i in range(len(seats)):
            if seats[i] == 1:
                index = i
            else:
                ans[i] = i-index
        index = -9999
        for i in range(len(seats)-1, -1, -1):
            if seats[i] == 1:
                index = i
            else:
                ans[i] = min(abs(i-index), ans[i]) # closest person
        return max(ans) # maximum distance

326. Power of Three
Given an integer, write a function to determine if it is a power of three.
Solution:
def isPowerOfThree(self, n: int) -> bool:
        if n <= 0:
            return False
        res = round(math.log(n, 3))
        return 3**res == n

198. House Robber
邻近的不能再打劫
Solution:
每次判断是否值得加上，跨一步和跨两步比较
def rob(self, nums: List[int]) -> int:
        prev, cur = 0, 0
        for i in range(len(nums)):
            prev, cur = cur, max(prev+nums[i], cur)
        return cur

35. Search Insert Position
Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would 
be if it were inserted in order.
You may assume no duplicates in the array.
Solution:
def searchInsert(self, nums: List[int], target: int) -> int:
        if len(nums)==0:
            return 0
        try:
            ans = nums.index(target)
            return ans
        except:
            if nums[-1]<target:
                return len(nums)
            elif nums[0]>target:
                return 0
            for i in range(len(nums)):
                if nums[i]>target:
                    return i

263. Ugly Number
Ugly numbers are positive numbers whose prime factors only include 2, 3, 5.
Solution:
ef isUgly(self, num: int) -> bool:
        if num<=0:
            return False
        else:
            while(num%2==0):
                num=num/2
            while(num%3==0):   
                num=num/3
            while(num%5==0):
                num=num/5
        
            return num==1

303. Range Sum Query - Immutable
Given an integer array nums, find the sum of the elements between indices i and j (i ≤ j), inclusive.
Solution:
class NumArray:

    def __init__(self, nums: List[int]):
        self.m = nums

    def sumRange(self, i: int, j: int) -> int:
        return sum(self.m[i:j+1])


# Your NumArray object will be instantiated and called as such:
# obj = NumArray(nums)
# param_1 = obj.sumRange(i,j)
(这题可以用integral image的想法做，然后只需要相减就可以)

645. Set Mismatch
 The set S originally contains numbers from 1 to n. But unfortunately, due to the data error, one of the numbers in the set 
 got duplicated to another number in the set, which results in repetition of one number and loss of another number.
Given an array nums representing the data status of this set after the error. Your task is to firstly find the number 
occurs twice and then find the number that is missing. Return them in the form of an array.
Solution:
def findErrorNums(self, nums: List[int]) -> List[int]:
        du = sum(nums)-sum(set(nums))
        los = int(len(nums)*(len(nums)+1)/2)-sum(nums)+du
        return [du,los]

66. Plus One
Solution:
def plusOne(self, digits: List[int]) -> List[int]:
        string = ""
        for digit in digits:
            string+=str(digit)
        string = int(string)
        string += 1
        ans = []
        for i in str(string):
            ans.append(i)
        return ans

459. Repeated Substring Pattern
Given a non-empty string check if it can be constructed by taking a substring of it and appending multiple copies of the 
substring together. You may assume the given string consists of lowercase English letters only and its length will not 
exceed 10000
Solution:
