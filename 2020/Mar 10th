529. Minesweeper
题目大意难懂
Solution:
def updateBoard(self, board: List[List[str]], click: List[int]) -> List[List[str]]:
        rows = len(board)
        cols = len(board[0])
        if board[click[0]][click[1]] == 'M':
            board[click[0]][click[1]] = 'X'
            # return board 
        directions = ((0, 1), (0, -1), (1, 0), (-1, 0), (-1, -1), (-1, 1), (1, -1), (1, 1))
        if board[click[0]][click[1]] == 'E':
            n = sum([board[click[0]+x][click[1]+y]=='M' for x, y in directions if rows>click[0]+x>=0 and cols>click[1]+y>=0])
            board[click[0]][click[1]] = str(n) if n else 'B'
            if not n: #这里没考虑到，导致把整个棋盘都翻了一遍，其实是会提前终止的，不用翻全部
                for direction in directions:
                    if rows>click[0]+direction[0]>=0 and cols>click[1]+direction[1]>=0:
                        self.updateBoard(board, [click[0]+direction[0], click[1]+direction[1]])
        return board

413. Arithmetic Slices
Solution:
(Wrong Solution)刚开始没看到要“连续”的才行，还以为
def numberOfArithmeticSlices(self, A: List[int]) -> int:
        if len(A)<=2:
            return 0
        cnt = 0
        for i in range(len(A)-2):
            for j in range(i+1, len(A)-1):
                # if j==len(A)-1:
                #     # cnt+=1
                #     break
                tmp = [A[i], A[j]]
                diff = A[j] - A[i]
                max_ = int((A[-1] - A[i]) / diff)
                if max_<2:
                    break
                for k in range(2, max_+1):
                    if A[i] + diff * k in A[j+1:]:
                        cnt += 1
        return cnt
(Correct Solution):
def numberOfArithmeticSlices(self, A: List[int]) -> int:
        res = 0;
        for i in range(len(A)-2):
            df = A[i + 1] - A[i];
            for j in range(i+1, len(A)-1):
                if (A[j + 1] - A[j] == df):
                    res += 1
                else:
                    break
        return res;

712. Minimum ASCII Delete Sum for Two Strings
Solution:
找longest common sequence,然后把sum1和sum2加起来减去就行。这里保留的是LCS的字符之和，不需要保留LCS。用dp。
def minimumDeleteSum(self, s1: str, s2: str) -> int:
        # find the longest common sequence and calculate the last characters
        l1 = len(s1)
        l2 = len(s2)
        dp = [[0]*(l2+1) for _ in range(l1+1)]
        for i in range(1, l1+1):
            for j in range(1, l2+1):
                if s1[i-1]==s2[j-1]:
                    dp[i][j] = dp[i-1][j-1] + ord(s1[i-1])
                else:
                    dp[i][j] = max(dp[i-1][j], dp[i][j-1])
        print(dp)
        sum1 = 0
        sum2 = 0
        for i in s1:
            sum1+=ord(i)
        for j in s2:
            sum2+=ord(j)
        return sum1+sum2-2*dp[l1][l2]
这题用到了LCS的标准动态规划方法，如果相同，就从左上角加上这次的字符，不一样就取上和左最大的。

547. Friend Circles
并查集
Solution:
def findCircleNum(self, M: List[List[int]]) -> int:
        parent = [i for i in range(len(M))]
        
        def find(i):
            while parent[i]!=i:
                i = parent[i]
            return i
        
        def union(i, j, m):
            ip = find(i)
            jp = find(j)
            if ip!=jp:
                parent[jp]  = ip
                m-=1
            return m
            
        NUM = len(M)
        m = NUM
        for i in range(NUM):
            for j in range(NUM):
                if M[i][j] == 1:
                    m = union(i, j, m)
        # print(m)
        # print(parent)
        # from collections import Counter
        # res = Counter(parent)
        return m
奇怪的问题：        
每次改变的都是parent，而不是每个和parent相同的每个点。如果要用Counter的话，需要路径压缩

1094. Car Pooling
Solution:

130. Surrounded Regions
Solution:
(并查集)12.21% 13.33%
def solve(self, board: List[List[str]]) -> None:
        """
        Do not return anything, modify board in-place instead.
        """
        rows = len(board)
        if rows==0:
            return 
        cols = len(board[0])
        
        # extra node as a flag
        parent = [i for i in range(1+rows*cols)] 

        def find(i):
            p = i
            while parent[p]!=p:
                p = parent[p]
            # 路径不压缩直接TLE
            while parent[i]!=i:
                temp = parent[i]
                parent[i] = p
                i = temp
            return p

        def union(i, j):
            ip = find(i)
            jp = find(j)
            if ip!=jp:
                parent[jp] = ip
                
        def isconnected(i, j):
            ip = find(i)
            jp = find(j)
            return ip==jp

        def mat2vec(i, j):
            return i*cols + j
                
        for i in range(rows):
            if board[i][0]=='O':
                union(mat2vec(i, 0), rows*cols)
            if board[i][cols-1]=='O':
                union(mat2vec(i, cols-1), rows*cols)
                
        for i in range(cols):
            if board[0][i]=='O':
                union(mat2vec(0, i), rows*cols)
            if board[rows-1][i]=='O':
                union(mat2vec(rows-1, i), rows*cols)
        
        
        # print(parent)
        directions = [(1, 0), (0, 1)]
        for i in range(rows):
            for j in range(cols):
                if board[i][j]=='O':
                    for direction in directions:
                        fx = i+direction[0]
                        fy = j+direction[1]
                        if fx<rows and fy<cols and board[fx][fy]=='O':
                            union(mat2vec(i, j), mat2vec(fx, fy))
                            
        print(parent)
        for i in range(1, rows-1):
            for j in range(1, cols-1):
                if board[i][j]=='O' and not isconnected(mat2vec(i, j), rows*cols):
                    board[i][j] ='X'

200. Number of Islands
Solution:
并查表，太慢了
def numIslands(self, grid: List[List[str]]) -> int:
        board = grid
        rows = len(board)
        if rows==0:
            return 0
        cols = len(board[0])
        
        parent = [i for i in range(rows*cols+1)] 

        def find(i):
            p = i
            while parent[p]!=p:
                p = parent[p]
            # 路径不压缩直接TLE
            while parent[i]!=i:
                temp = parent[i]
                parent[i] = p
                i = temp
            return p

        def union(i, j):
            ip = find(i)
            jp = find(j)
            if ip!=jp:
                parent[jp] = ip

        def mat2vec(i, j):
            return i*cols + j
        
        directions = [(1, 0), (0, 1)]
        for i in range(rows):
            for j in range(cols):
                if board[i][j]=='0':
                    union(mat2vec(i, j), rows*cols)
                if board[i][j]=='1':
                    for direction in directions:
                        fx = i+direction[0]
                        fy = j+direction[1]
                        if fx<rows and fy<cols and board[fx][fy]=='1':
                            union(mat2vec(i, j), mat2vec(fx, fy))
        res = -1
        for index, pt in enumerate(parent):
            if pt == index:
                res += 1
        return res

1094. Car Pooling
Solution:
def carPooling(self, trips: List[List[int]], capacity: int) -> bool:
        res = [0] * 1001
        for i in range(len(trips)):
            for j in range(trips[i][1], trips[i][2]):
                res[j] += trips[i][0]
                
        return max(res)<=capacity
(2)60 100
def carPooling(self, trips: List[List[int]], capacity: int) -> bool:
        res = [0] * 1001
        for i in range(len(trips)):
            res[trips[i][1]] += trips[i][0]
            res[trips[i][2]] -= trips[i][0]
        for i in range(len(res)):
            if i==0:
                res[i] = res[i]
            else:
                res[i] += res[i-1]
            if res[i]>capacity:
                return False
        return True
