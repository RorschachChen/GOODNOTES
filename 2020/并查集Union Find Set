带权值的并查集
https://www.zybuluo.com/liweiwei1419/note/1393567

并查集主要用于解决连通问题，即抽象概念中结点和结点是否连接。而路径问题，不仅仅要考虑连通问题，我们还要往往还需要求出最短路径，这不是并查集做的事情。
因此并查集问题能做的事情比路径问题少，它更专注于（1）判断连接状态（查）（2）改变连接状态（并）。


399. Evaluate Division

find需要路径压缩，还要进行权重压缩

路径压缩就是将当前节点挂到其父节点的父节点下，
那么当前节点到 其父节点的父节点 的 权值
就是 当前节点到其父节点的权值 * 当前节点的父节点 到 其父节点的父节点的权值。

这道题还要考虑equations里没有的，queries里有的情况
还需要考虑python中哪种结构能key是char，value也是char的，

def calcEquation(self, equations: List[List[str]], values: List[float], queries: List[List[str]]) -> List[float]:
        parent = {}
        for i in range(len(equations)):
            if equations[i][0] not in parent:
                parent[equations[i][0]] = equations[i][0]
            if equations[i][1] not in parent:
                parent[equations[i][1]] = equations[i][1]
                
        val = {}
        for key in parent:
            if key not in val:
                val[key] = 1.0
        
        def getFather(i):
            if parent[i] == i:
                return i
            else:
                tmp = getFather(parent[i])
                val[i] = val[i] * val[parent[i]]
                parent[i] = tmp
                # print(parent[x])
                return parent[i]
            
        def merge(i, j, value):
            ii = getFather(i)
            jj = getFather(j)
            print(ii)
            print(jj)
            parent[jj] = ii;
            val[jj] = val[i] * 1.0 / val[j] * value;
            
        def ask(i, j):
            if i not in parent or j not in parent:
                return -1
            ii = getFather(i) 
            jj = getFather(j)
            if ii != jj:
                return -1;
            return val[j] * 1.0 / val[i]; 
            
        for i in range(len(equations)):
            merge(equations[i][0], equations[i][1], values[i])
            
        print(parent)
        print(val)
        ans = []    
        for i in range(len(queries)):
            ans.append(ask(queries[i][0], queries[i][1]))     
        return ans

130. 

200. Number of Islands
