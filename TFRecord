tf.python_io.TFRecordWriter
TFRecords是一种tensorflow的内定标准文件格式,其后缀一般为tfrecord。适用于大量数据的顺序读取
步骤
第一步，生成TFRecord Writer
writer = tf.python_io.TFRecordWriter(path, options=None)
path：TFRecord文件的存放路径；
option：TFRecordOptions对象，定义TFRecord文件保存的压缩格式；
第四步，将example数据系列化为字符串
example_str = example.SerializeToString()
第五步，将系列化为字符串的example数据写入协议缓冲区
writer.write(example_str)
第六步，关闭
writer.close()
TFRecords文件的读取主要是使用tf.TFRecordReader和tf.python_io.tf_record_iterator
第一步，使用tf.train.string_input_producer生成文件队列
filename_queues = tf.train.string_input_producer([tfrecord_path_none,tfrecord_path_zlib,tfrecord_path_gzip])
第二步，生成TFRecord Reader
reader = tf.TFRecordReader(name=None, options=None) # options是tfrecord文件存储时的压缩方式
第三步，读取tfrecord文件
_,serialized_example = reader.read(filename)
filename是tf.train.string_input_producer得到的文件队列名，读取得到的是一个系列化的example。
第四步，使用tf.parse_single_example解析得到的系列化example
features = tf.parse_single_example( 
serialized_example,
features={
"float_val":tf.FixedLenFeature([], tf.float),
"width":tf.FixedLenFeature([], tf.int64),
"height":tf.FixedLenFeature([], tf.int64),
"image_raw":tf.FixedLenFeature([], tf.string)
}
)
需要按照存储时的格式还原features，必须写明features内的字典的键索引得到特定的数据
第五步，处理得到的数据
features是一个字典，要使用特定数据，需要用字典的key来索引得到相应的数据，如要得到的width的值，则可以以features['width']得到，对于得到的数据还需要做一些处理的，比如features['image_raw']需要decode才能显示整个图片。
