1185. Day of the Week
闰年
Solution:
就是磨时间
def dayOfTheWeek(self, day: int, month: int, year: int) -> str:
        lis = ["Friday", "Saturday","Sunday", "Monday", "Tuesday", "Wednesday", "Thursday"]
        daysinamonth = [[31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],[31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]]
        res = 0
        for yr in range(1971,year):
            flag = (yr%4 == 0 and yr%100 != 0) or yr%400==0
            res += 365+flag
        flag = (year%4 == 0 and year%100 != 0) or year%400==0
        for mth in range(0, month-1):
            res += daysinamonth[flag][mth]
        return lis[(res+day-1)%7]

893. Groups of Special-Equivalent Strings
奇数位交换，偶数位交换，之后只要能相等就行
Solution:
对奇数位和偶数位分别sort，只要含这么多的元素就肯定可以利用交换最后相等
def minCostToMoveChips(self, chips: List[int]) -> int:
        s = set()
        for a in A:
            odd = ""
            even = ""
            for i, c in enumerate(a):
                if i % 2 == 0:
                    odd += c
                else:
                    even += c      
            s.add(''.join(sorted(odd) + sorted(even)))
        return len(s)

1217. Play with Chips
把奇数位移动到偶数位和反过来的min
Solution:
def minCostToMoveChips(self, chips: List[int]) -> int:
        temp = [0, 0]
        for i in chips:
            temp[i%2] += 1
        return min(temp[0], temp[1])

867. Transpose Matrix
Solution:
def transpose(self, A: List[List[int]]) -> List[List[int]]:
        row = len(A)
        col = len(A[0])
        B = [[0]*row for _ in range(col)]
        for i in range(row):
            for j in range(col):
                B[j][i] = A[i][j]
        return B

806. Number of Lines To Write String
每个字母一定width，换行
Solution:
def numberOfLines(self, widths: List[int], S: str) -> List[int]:
        line = 1
        last = 0
        for s in S:
            width = widths[ord(s) - ord('a')]
            last += width
            if last > 100:
                lines += 1
                last = width
        return [lines, last]

500. Keyboard Row
Given a List of words, return the words that can be typed using letters of alphabet on only one 
row's of American keyboard like the image below.
Solution:
暴力写进dict
def findWords(self, words: List[str]) -> List[str]:
        lis = {'q':0, 'w':0,'e':0,'r':0,'t':0,'y':0,'u':0,'i':0,'o':0,'p':0, 'a':1,'s':1,'d':1,'f':1,'g':1,
        'h':1,'j':1,'k':1,'l':1,'z':2,'x':2,'c':2,'v':2,'b':2,'n':2,'m':2,'Q':0, 'W':0,'E':0,'R':0,'T':0,
        'Y':0,'U':0,'I':0,'O':0,'P':0, 'A':1,'S':1,'D':1,'F':1,'G':1,'H':1,'J':1,'K':1,'L':1,'Z':2,'X':2,
        C':2,'V':2,'B':2,'N':2,'M':2,}
        back = []
        for word in words:
            line = lis[word[0]]
            flag = 0
            for string in word:
                if lis[string] != line:
                    flag = 1
                    break
            if flag == 0:
                back.append(word)
                
        return back

1022. Sum of Root To Leaf Binary Numbers <<Tree>>
二叉树，节点0或1。每条path可组成一个二进制树，求所有的和
Solution:
【负雪名烛的答案】
提前设置一个global的sum。遍历所有的节点，每当走到叶的时候，把global sum加上一个目前的。每到下一个节点，把当前的presum*2加上下个节点的val。
def sumRootToLeaf(self, root: TreeNode) -> int:
        if not root:
            return 0
        self.globalsum = 0
        self.recur(root, root.val)
        return self.globalsum
        
    def recur(self, node, presum):
        if not node.left and not node.right:
            self.globalsum += presum
            return
        if node.left:
            self.recur(node.left, presum*2+node.left.val)
        if node.right:
            self.recur(node.right, presum*2+node.right.val)

104. Maximum Depth of Binary Tree
Solution:
和上题同样的思想
def maxDepth(self, root: TreeNode) -> int:
        if not root:
            return 0
        self.maxi = 1
        self.search(root, 1)
        return self.maxi
    
    def search(self, node, currentmax):
        if not node.left and not node.right:
            self.maxi = max(self.maxi,currentmax)
            return
        if node.left:
            self.search(node.left, currentmax+1)
        if node.right:
            self.search(node.right, currentmax+1)

766. Toeplitz Matrix
所有对角线是否相等，从左下角到右上角。
Solution:
【负雪名烛的答案】
return all(matrix[row+1][1:] == matrix[row][:-1] for row in range(len(matrix)-1))

476. Number Complement
10->2进制，取反
Solution:
def findComplement(self, num: int) -> int:
        def mybin(x):
	        return bin(x).replace('0b', '')
        return 2**(len(mybin(num)))-1-num

1046. Last Stone Weight
最重两块石头相撞，相等团灭，不相等产生新的:
Solution:
(dumpbird)
def lastStoneWeight(self, stones: List[int]) -> int:
        new = sorted(stones)[::-1]
        if len(stones)==1:
            return 1
        return self.recur(new)
        
    def recur(self, lis):
        if lis[0] == lis[1]:
            del lis[0]
            del lis[0]
        else:
            lis.append(lis[0]-lis[1])
            del lis[0]
            del lis[0]
        if len(lis)==0:
            return 0
        elif len(lis)==1:
            return lis[0]
        return self.recur(sorted(lis)[::-1])
这个题就是我们在数据结构与算法中都学过的哈弗曼树的改变。哈弗曼树是指每次选择最小的两个元素合并成一个更大的元素，然后和剩下的一些元素继续重复这个操作。
而这个题反其道而行之，每次选择最大的两个元素合并成一个较小的元素，然后和剩下的元素重复这个操作。实现哈弗曼树最简单的方式就是使用堆。显然这个题使用大根
堆。在python中的堆默认是小根堆，为了实现大根堆，一个方式是把所有的数字进行取反操作，最后的结果再取反即可。C++的堆默认是大根堆，那么我们就直接使用。
我觉得技术上的难点只有要进行多次的判断。一定要注意在进行pop的时候是否还有元素，特别是这个题要进行两次连续的pop。另外一个注意的点是如果两个石头抵消了，
那么结果0就不一样放入原来的数组中了。最后一个注意的点事最后可能全部都抵消了，所以如果结果为空则返回0。

时间复杂度是O(NlogN)。
————————————————
版权声明：本文为CSDN博主「负雪明烛」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/fuxuemingzhu/article/details/91348483

463. Island Perimeter
求全1的岛屿周长
Solution:
本来想搞些dfs的，结果发现这种暴力方法击败了98%的，那还搞个锤子
def islandPerimeter(self, grid: List[List[int]]) -> int:
        row = len(grid)
        col = len(grid[0])
        counts = 0
        neighbors = 0
        for i in range(row):
            for j in range(col):
                if grid[i][j] == 1:
                    counts += 1
                    if i < row - 1:
                        if grid[i + 1][j] == 1:
                            neighbors += 1
                    if j < col - 1:
                        if grid[i][j + 1] == 1:
                            neighbors += 1
        return 4 * counts - 2 * neighbors

985. Sum of Even Numbers After Queries
把queries中的val加到A中，每次加完后把A中偶数和返回
Solution:
（暴力解法）68.30% 5.88% 
def sumEvenAfterQueries(self, A: List[int], queries: List[List[int]]) -> List[int]:
        back = []
        index = queries[0][1]
        A[index] += queries[0][0]
        summ = 0
        for i in A:
            if i%2==0:
                summ += i
        back.append(summ)
        for i in range(1, len(queries)):
            index = queries[i][1]
            temp = A[index]
            A[index] += queries[i][0]
            if A[index]%2==0 and temp%2==0:
                back.append(back[-1]+queries[i][0])
            elif A[index]%2==0 and temp%2==1:
                back.append(back[-1]+A[index])
            elif A[index]%2==1 and temp%2==0:
                back.append(back[-1]-temp)
            else:
                back.append(back[-1])
        return back

136. Single Number
找到单个元素
Solution:
（暴力解法）
def singleNumber(self, nums: List[int]) -> int:
        news = sorted(set(nums))
        news.extend(news)
        nums = sorted(nums)
        news = sorted(news)
        nums.append(0)
        for i in range(len(nums)):
            if nums[i] != news[i]:
                return news[i]
（异或解法）50.53% 8.20%
def singleNumber(self, nums: List[int]) -> int:
        result = 0;
        for i in range(len(nums)):
            result ^= nums[i]
        return result;
（利用全和）98.04% 
return(2*sum(set(nums))-sum(nums))

682. Baseball Game
if满天飞
Solution:
def calPoints(self, ops: List[str]) -> int:
        score = []
        for string in ops:
            if string == "C":
                _ = score.pop()
            elif string == "D":
                score.append(score[-1]*2)
            elif string == "+":
                score.append(score[-1]+score[-2])
            else:
                score.append(int(string))
        return sum(score)

884. Uncommon Words from Two Sentences
Solution:
DUCKLINGS...
def uncommonFromSentences(self, A: str, B: str) -> List[str]:
        lis1 = A.split(" ")
        lis2 = B.split(" ")
        lis1.extend(lis2)
        from collections import Counter
        res = Counter(lis1)
        back = []
        for i in res.keys():
            if res[i] == 1:
                back.append(i)
        return back

496. Next Greater Element I
You are given two arrays (without duplicates) nums1 and nums2 where nums1’s elements are subset of nums2. 
Find all the next greater numbers for nums1's elements in the corresponding places of nums2.
The Next Greater Number of a number x in nums1 is the first greater number to its right in nums2. 
If it does not exist, output -1 for this number. 
Solution:
(暴力解法)
def nextGreaterElement(self, nums1: List[int], nums2: List[int]) -> List[int]:
        dd = {}
        for i in range(len(nums2)):
            dd[nums2[i]] = i
        res = []
        for i in nums1:
            if dd[i] == len(nums2)-1:
                res.append(-1)
                continue
            for j in range(dd[i]+1, len(nums2)):
                if nums2[j] > i:
                    res.append(nums2[j])
                    break
                elif j == len(nums2)-1:
                    res.append(-1)
                else:
                    continue
        return res

1114. Print in Order（这个是Leetcode的新题型，也就是说并发类型）（joy）
Solution:
跑1的时候锁住2，2要wait，2跑完锁住3，3等解锁。
class Foo:
    def __init__(self):
        self.second_cv = threading.Event() 
        self.third_cv = threading.Event() 
        

    def first(self, printFirst: 'Callable[[], None]') -> None:
        
        # printFirst() outputs "first". Do not change or remove this line.
        printFirst()
        self.second_cv.set()


    def second(self, printSecond: 'Callable[[], None]') -> None:
        self.second_cv.wait()
        # printSecond() outputs "second". Do not change or remove this line.
        printSecond()
        self.third_cv.set()


    def third(self, printThird: 'Callable[[], None]') -> None:
        self.third_cv.wait()
        # printThird() outputs "third". Do not change or remove this line.
        printThird()

669. Trim a Binary Search Tree
只保留在区间「LR」内的元素，但是不能多剪
Solution:
迭代，如果当前节点值小于L就去right节点找，反之亦然。每次调用trimBST都是对输入节点的一次剪枝，返回的是剪好后的node。如果当前值在LR之内，则剪完左边
剪右边，返回的两个节点赋值给left和right。再返回当前节点。
def trimBST(self, root: TreeNode, L: int, R: int) -> TreeNode:
        if not root:
            return None
        if root.val < L:
            return self.trimBST(root.right, L, R)
        elif root.val > R:
            return self.trimBST(root.left, L, R)
        else:
            root.left = self.trimBST(root.left, L, R)
            root.right = self.trimBST(root.right, L, R)
            return root

1189. Maximum Number of Balloons
给一串字符，问能拼成几个"balloon"
Solution:
def maxNumberOfBalloons(self, text: str) -> int:
        from collections import Counter
        res = Counter(text)
        return min(res['b'], res['a'], res['l']//2, res['o']//2, res['n'])

1287. Element Appearing More Than 25% In Sorted Array
找那个重复了25%以上的数
Solution:
def findSpecialInteger(self, arr: List[int]) -> int:
        length = len(arr)
        from collections import Counter
        res = Counter(arr)
        for key in res.keys():
            if res[key] > length//4:
                return key

762. Prime Number of Set Bits in Binary Representation
把一个区间内的数转成2进制，看2进制中1的个数，统计所有1的个数和为素数的
Solution:
(暴力解法) 60%
from collections import Counter
        dd = {'1':0, '2':1, '3':1, '4':0, '5':1, '6':0, '7':1, '8':0, '9':0, '10':0, '11':1, '12':0, '13':1, '14':0, '15':0, '16':0, '17':1, '18':0, '19':1, '20':0}
        count = 0
        for i in range(L, R+1):
            count += dd[str(bin(i).count('1'))]
        return count
100%
primes = set((2,3,5,7,11,13,17,19))
count = 0
for x in range(L,R+1):
    if bin(x).count("1") in primes:
	count += 1
return count

226. Invert Binary Tree
Invert a binary tree.左右
Solution:
换完底下的再换上层的。
def invertTree(self, root: TreeNode) -> TreeNode:
        if not root:
            return 
        if root.left:
            root.left = self.invertTree(root.left)
        if root.right:
            root.right = self.invertTree(root.right)
        temp = root.left
        root.left = root.right
        root.right = temp
        return root

412. Fizz Buzz
3的倍数5的倍数15的倍数
Solution:
太无聊了
def fizzBuzz(self, n: int) -> List[str]:
        res = []
        for i in range(1, n+1):
            if i%3==0 and i%5==0:
                res.append("FizzBuzz")
                continue
            elif i%5 == 0:
                res.append("Buzz")
            elif i%3 == 0:
                res.append("Fizz")
            else:
                res.append(str(i))
                
        return res

784. Letter Case Permutation
Given a string S, we can transform every letter individually to be lowercase or uppercase to create another string.  
Return a list of all possible strings we could create.
Solution:
