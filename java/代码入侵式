侵入式（引入或继承了别的包或框架）
从字面意思理解，就是你的代码里已经嵌入了别的代码，这些代码可能是你引入过的框架，也可能是你通过接口继承得来的（比如：java中的继承），这样你就可以拥有侵入代码的一些功能。
所以我们就称这段代码是侵入式代码。非要说侵入式代码的优点：通过侵入代码与你的代码结合可以更好的利用侵入代码提供给的功能。缺点：框架外代码就不能使用了，不利于代码复用。依赖太多重构代码太痛苦了。

非侵入式（没有依赖，自主研发）
正好与侵入式相反，你的代码没有引入别的包或框架，完完全全是自主开发。比如golang中的结构体中的字段组合，这是非侵入式的，我完完全全可以其中某个字段的方法集合，
或者我可以通过实现自己的方法集合从而达到剥离依赖关系的目的。优点：代码可复用，方便移植。非侵入式也体现了代码的设计原则：高内聚，低耦合

侵入式让用户代码产生对框架的依赖，这些代码不能在框架外使用，不利于代码的复用。但侵入式可以使用户跟框架更好的结合，更容易更充分的利用框架提供的功能。

例子
初级解释:
A是侵入性的，B代码中使用A，那么如果以后不用A了（用另外一个工具代替），必须修改B的代码。
反之，如果A是非侵入性的，B不用A，用C了，代码不需要改，改改配置文件什么的，就可以了。
进阶解释:
Spring和hibernate都是通过声明式配置文件，
就可以实现我们所要的功能，很少用他们的API
进行编码，估计这是叫低侵入性吧，
EJB则相反。

再比如 Spring Mvc架构中的Service层，离开Spring依然可以运行，通过配置完成依赖注入后就可以使用，此时，spring就没有侵入到我业务类的代码里，这种表现为非侵入式。
当然，在实际设计中，真正能够做到完全非侵入式设计很难，只能尽量降低侵入程度。
侵入是在两个系统发生耦合的时候造成的，所谓侵入性就是指的这个框架设计出来的部件对系统的影响范围，比如开发一个系统要使用第三方框架，如果使用的这个框架需要继承或者实现框架里面的类和接口,
就说这个框架具有侵入性。反之则说那个框架具有“低侵入性”。

使用mybatis，不需要集成mybatis特定的类，甚至可以和其他ORM组件共存，然后就可以使用-----低侵入性，
