If that's my problem, let it be. 

1295. Find Numbers with Even Number of Digits
Given an array nums of integers, return how many of them contain an even number of digits. 
Solution:
def findNumbers(self, nums: List[int]) -> int:
        ans = 0
        for num in nums:
            if int(math.log(num, 10))%2==1:
                ans += 1
        return ans

1299. Replace Elements with Greatest Element on Right Side
Given an array arr, replace every element in that array with the greatest element among the elements to its right, 
and replace the last element with -1.
After doing so, return the array.
Solution:
Ohhhhhhhhhhhhhhhhhhhhhh 100% 100%
def replaceElements(self, arr: List[int]) -> List[int]:
        if len(arr) == 1:
            return [-1]
        res = []
        start = 1
        while len(res)<=len(arr)-1:
            nextmax = arr[start:].index(max(arr[start:]))
            res.extend([max(arr[start:])]*(nextmax+1))
            start += nextmax+1
            if start > len(arr)-1:
                break
        del res[len(arr)-1:]
        res.append(-1)
        return res

5295. Find N Unique Integers Sum up to Zero
Given an integer n, return any array containing n unique integers such that they add up to 0.
Solution:
def sumZero(self, n: int) -> List[int]:
        ans = [i for i in range(1, n)]
        ans.append(-int(n*(n-1)/2))
        return ans

720. Longest Word in Dictionary
Given a list of strings words representing an English Dictionary, find the longest word in words that can be built one 
character at a time by other words in words. If there is more than one possible answer, return the longest word with the 
smallest lexicographical order.
Solution:
def longestWord(self, words: List[str]) -> str:
        words.sort()
        res = set([''])
        longestWord = ""
        for word in words:
            if word[:-1] in res:
                res.add(word)
                if len(word) > len(longestWord):
                    longestWord = word
        return longestWord

27. Remove Element
Solution:
不是val就填到nums前面，用一个pointer来确认
def removeElement(self, nums: List[int], val: int) -> int:
        fi = 0
        for i in range(len(nums)):
            if nums[i]!=val:
                nums[fi] = nums[i]
                fi += 1
        return fi

1128. Number of Equivalent Domino Pairs
Solution:
def numEquivDominoPairs(self, dominoes: List[List[int]]) -> int:
        dd = {}
        for domino in dominoes:
            name = ""
            domino = sorted(domino)
            for do in domino:
                name+=str(do)
            if name in dd.keys():
                dd[name] += 1
            else:
                dd[name] = 1
        count = 0
        for key in dd.keys():
            count += dd[key]*(dd[key]-1)/2
        return int(count)

119. Pascal's Triangle II
Given a non-negative index k where k ≤ 33, return the kth index row of the Pascal's triangle.
Solution:
def getRow(self, rowIndex: int) -> List[int]:
        numRows = rowIndex
        if numRows == 0 :
            return [1]
        if numRows == 1:
            return [1,1]
        if numRows == 2:
            return [1, 2, 1]
        
        ans = [[1], [1, 1]]
        temp = [1, 1]
        for i in range(numRows-1):
            this = [1]
            for j in range(len(temp)-1):
                this.append(temp[j]+temp[j+1])
            this.append(1)
            ans.append(this)
            temp = this
        return ans[-1]

551. Student Attendance Record I
Solution:
偶尔写点冗余代码，嘿嘿
def checkRecord(self, s: str) -> bool:
        Acount = 0
        for i in range(len(s)-2):
            if s[i] == "L" and s[i+1] == "L" and s[i+2] == "L":
                return False
            elif s[i]=="A":
                Acount += 1
                if Acount > 1:
                    return False
        if s[-1] == "A":
            Acount += 1
        if len(s) > 1:
            if s[-2] == "A":
                Acount += 1
        if Acount > 1:
            return False
        return True

232. Implement Queue using Stacks
Solution:
class MyQueue:

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.s = []

    def push(self, x: int) -> None:
        """
        Push element x to the back of queue.
        """
        self.s.insert(0, x)

    def pop(self) -> int:
        """
        Removes the element from in front of queue and returns that element.
        """
        return self.s.pop()

    def peek(self) -> int:
        """
        Get the front element.
        """
        return self.s[-1]

    def empty(self) -> bool:
        """
        Returns whether the queue is empty.
        """
        return len(self.s)==0


# Your MyQueue object will be instantiated and called as such:
# obj = MyQueue()
# obj.push(x)
# param_2 = obj.pop()
# param_3 = obj.peek()
# param_4 = obj.empty()

401. Binary Watch
Solution:
def readBinaryWatch(self, num: int) -> List[str]:
        if num == 0:
            return ["0:00"]
        
        return_list = []
        hours = [8,4,2,1]
        minutes = [32,16,8,4,2,1]
        
        for i in range(min(num, 4)+1):
            possible_minutes = list(itertools.combinations(minutes,num-i))
            possible_hours = list(itertools.combinations(hours, i))
            
            possible_hours = list(map(lambda y: str(sum(y)), filter(lambda x: sum(x) <= 11, possible_hours)))
            
            possible_minutes = list(map(lambda y: str(sum(y)), filter(lambda x: sum(x) <= 59, possible_minutes)))
            
            possible_minutes = ["0"+minute if int(minute) < 10 else minute for minute in possible_minutes]
            
            return_list.extend(hour+":"+minute for hour in possible_hours for minute in possible_minutes)
        
        return return_list

191. Number of 1 Bits
Write a function that takes an unsigned integer and return the number of '1' bits it has (also known as the Hamming weight).
Solution:
这题在python里好简单
def hammingWeight(self, n: int) -> int:
        from collections import Counter
        # print(bin(n).replace('0b', ""))
        res = Counter(str(bin(n)))
        return res['1']

70. Climbing Stairs
It takes n steps to reach to the top.
Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?
Solution:
(超时)
def climbStairs(self, n: int) -> int:
        if n==1:
            return 1
        if n==2:
            return 2
        return self.climbStairs(n-1)+self.climbStairs(n-2)
（2）        
def climbStairs(self, n: int) -> int:
        li=[0,1]
        for x in range(2,n+1):
            li.append(li[x-1] + li[x-2])      
        return sum(li[-2:])              

504. Base 7
Given an integer, return its base 7 string representation.
Solution:
def convertToBase7(self, num: int) -> str:
        if num == 0:
            return 0
        temp = abs(num)
        maxbit = int(math.log(temp, 7))+1
        if num>0:
            ans = ""
        else:
            ans = "-"
        for i in range(maxbit):
            if i==maxbit-1:
                ans+=str(temp)
                break
            ans+=str(temp//(7**(maxbit-i-1)))
            temp=temp%(7**(maxbit-i-1))
        return ans

53. Maximum Subarray
Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and 
return its sum.
Solution:
def maxSubArray(self, nums: List[int]) -> int:
        if len(nums)==0:
            return 0
        if len(nums)==1:
            return nums[0]
        this = res = nums[0]
        for i in range(1, len(nums)):
            this = max(this+nums[i], nums[i])
            res = max(this, res)
        return res

674. Longest Continuous Increasing Subsequence
Solution:
def findLengthOfLCIS(self, nums: List[int]) -> int:
        if len(nums)==0:
            return 0
        if len(nums)==1:
            return 1
        res = []
        thislen = 1
        for i in range(len(nums)-1):
            if i == len(nums)-2:
                if nums[i]<nums[i+1]:
                    thislen += 1
                res.append(thislen)
            if nums[i]<nums[i+1]:
                thislen += 1
            else:
                res.append(thislen)
                thislen = 1
        return max(res)

594. Longest Harmonious Subsequence
Solution:
def findLHS(self, nums: List[int]) -> int:
        if len(nums)==0 or len(nums)==1:
            return 0
        so = sorted(nums)
        from collections import Counter
        res = Counter(so)
        ans = []
        for key in res.keys():
            if key+1 in res.keys():
                ans.append(res[key]+res[key+1])
            if key-1 in res.keys():
                ans.append(res[key]+res[key-1])
        if len(ans) == 0:
            return 0
        return max(ans)

