965. Univalued Binary Tree <<Tree>>
判断树中值是否全部相等
Solution:
def isUnivalTree(self, root: TreeNode) -> bool:
        if not root: return
        stack = [root]
        res = []
        while stack:
            node = stack.pop()
            res.append(node.val)
            if node.left:
                stack.append(node.left)
            if node.right:
                stack.append(node.right)
        return len(sorted(set(res)))==1
使用栈

559. Maximum Depth of N-ary Tree <<Tree>><<DFS>><<BFS>>
def maxDepth(self, root: 'Node') -> int:
        if not root:
            return 0
        if not root.children:
            return 1
        depth = 1 + max(self.maxDepth(child) for child in root.children)
        return depth
Solution:一直返回节点的最大的深度，然后回上一层后加1.

897. Increasing Order Search Tree
Given a binary search tree, rearrange the tree in in-order so that the leftmost node in the tree is now the root
of the tree, and every node has no left child and only 1 right child.
Solution:

1290. Convert Binary Number in a Linked List to Integer
二进制放在链表里，得到十进制结果
Solution: 
def getDecimalValue(self, head: ListNode) -> int:
        stack = [head]
        res = []
        while stack:
            node = stack.pop()
            res.append(node.val)
            if node.next:
                stack.append(node.next)
        ans = 0
        import math
        for i in range(len(res)):
            ans += int(math.pow(2, i)*res[len(res)-1-i])
            
        return ans
 
1281. Subtract the Product and Sum of Digits of an Integer
Solution: too easy.

1221. Split a String in Balanced Strings
Given a balanced string s split it in the maximum amount of balanced strings.
Return the maximum amount of splitted balanced strings.
Solution: 用一个flag和count，L：+1，R：-1。 统计flag=0的次数

1252. Cells with Odd Values in a Matrix
Dec17里又碰到了
Solution:
matrix = [[0]*m for _ in range(n)]
for r, c in indices:
    for j in range(m): matrix[r][j] ^= 1  
    for i in range(n): matrix[i][c] ^= 1
return sum(sum(matrix, []))
（2）
row = [0] * n
col = [0] * m
for i, j in indices:
    row[i] += 1
    col[j] += 1
ans = 0
for i in range(n):
    for j in range(m):
        if (row[i] + col[j]) % 2:
            ans += 1
return ans

1207. Unique Number of Occurrences
Solution:
def uniqueOccurrences(self, arr: List[int]) -> bool:
        from collections import Counter
        result = Counter(arr)
        #result = [result.values()]
        ans = []
        for i in result:
            ans.append(result[i])
        return len(ans)==len(set(ans))
        
1051. Height Checker
需要数字从小到大排列，问站错的人的数量
Solution:
直接sorted后和原来的一个位置一个位置比。统计数量
def heightChecker(self, heights: List[int]) -> int:
        count = 0
        for i,j in zip(heights,sorted(heights)):
            if i != j:
                count += 1
        return count

929. Unique Email Addresses
@前的带.的视为一样，+后的不考虑，@后的视为不一样
Solution:
def numUniqueEmails(self, emails: List[str]) -> int:
        res = []
        for email in emails:
            res.append(email.split('@')[0].split('+')[0].replace('.', '')+'@'+email.split('@')[1])
        return len(set(res))

922. Sort Array By Parity II
A一半奇数一半偶数，重新排好后的奇数位置是奇数。
Solution:
def sortArrayByParityII(self, A: List[int]) -> List[int]:
        odd = [i for i in A if i%2==1]
        even = [i for i in A if i%2==0]
        res = []
        for i in range(len(A)):
            if i%2==1:
                res.append(odd[i//2])
            else:
                res.append(even[i//2])
        return res

811. Subdomain Visit Count
给["9001 discuss.leetcode.com"]，每个"."后面的都是一个domain，统计所有domain的数量
Solution:
用collections.Counter来统计，不需要考虑collections中是否有记录，直接加。
def subdomainVisits(self, cpdomains: List[str]) -> List[str]:
        count = collections.Counter()
        for cpdomain in cpdomains:
            time, domain = cpdomain.split(" ")
            time = int(time)
            count[domain] += time
            for i, c in enumerate(domain):
                if c=='.':
                    count[domain[i+1:]]+=time
        return [str(time) + " " + domain for domain, time in count.items()]
